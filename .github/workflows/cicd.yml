name: CI/CD Pipeline

on:
  push:
    branches:
      - pipeline

jobs:
  build-push-to-ecr:
    runs-on: ubuntu-latest
    env:
        ECR_REPO: ${{ secrets.ECR_REPO }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update

    - name: Login to ECR
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region eu-central-1
        aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR_REPO

    - name: Build and Push Docker image to ECR
      run: |
        export DATE=$(date +%F_%H-%M-%S)
        docker build --build-arg base_url=${{ secrets.BASE_URL }} -t frontend:latest .
        docker tag frontend:latest $ECR_REPO:latest
        docker tag frontend:latest $ECR_REPO:frontend_$DATE
        docker push $ECR_REPO:latest
        docker push $ECR_REPO:frontend_$DATE
        
  deploy-to-ec2:
    needs: build-push-to-ecr
    runs-on: ubuntu-latest
    env:
        ECR_REPO: ${{ secrets.ECR_REPO }}
    steps:
    - name: Decode SSH Key
      run: |
        echo "${{ secrets.SSH_KEY }}" > ./bastion
        chmod 400 bastion

    - name: Deploy to EC2 via Bastion
      run: |
        ssh -o StrictHostKeyChecking=no -i ./bastion ec2-user@${{ secrets.BASTION_HOST }} "ssh -o StrictHostKeyChecking=no -i ~/.ssh/bastion ec2-user@${{ secrets.FRONTEND_HOST }} '/home/ec2-user/stop_rm_containers.sh'"
        ssh -o StrictHostKeyChecking=no -i ./bastion ec2-user@${{ secrets.BASTION_HOST }} "ssh -o StrictHostKeyChecking=no -i ~/.ssh/bastion ec2-user@${{ secrets.FRONTEND_HOST }} 'aws ecr get-login-password --region eu-central-1 | sudo docker login --username AWS --password-stdin $ECR_REPO'"
        ssh -o StrictHostKeyChecking=no -i ./bastion ec2-user@${{ secrets.BASTION_HOST }} "ssh -o StrictHostKeyChecking=no -i ~/.ssh/bastion ec2-user@${{ secrets.FRONTEND_HOST }} 'sudo docker pull $ECR_REPO:latest && sudo docker run -d -p 80:80 $ECR_REPO:latest'"
